{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","asyncIntervals","runAsyncInterval","cb","interval","intervalIndex","a","setTimeout","App","useState","modelsLoaded","setModelsLoaded","cantCaras","setCantCaras","streamLoaded","setStreamLoaded","_videoRef","useRef","useEffect","console","log","Promise","all","faceapi","tinyFaceDetector","load","faceLandmark68TinyNet","faceRecognitionNet","then","catch","err","isLoaded","length","push","Error","setAsyncInterval","current","video","videoElement","pro","resolve","reject","timeOut","detections","mensaje","color","className","style","backgroundColor","ref","videoConstraints","width","height","facingMode","audio","onUserMedia","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,sOCQrCC,EAAiB,GAEjBC,EAAgB,uCAAG,WAAMC,EAAIC,EAAUC,GAApB,SAAAC,EAAA,sEACfH,IADe,OAEjBF,EAAeI,IACfE,YAAW,kBAAML,EAAiBC,EAAIC,EAAUC,KAAgBD,GAH/C,2CAAH,0DA6HPI,MAnGf,WAAgB,IAAD,EAC2BC,oBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAG2BJ,oBAAS,GAHpC,mBAGNK,EAHM,KAGQC,EAHR,KAIPC,EAAYC,iBAAO,MASzBC,qBAAU,WACLF,IAEDG,QAAQC,IAAI,oBACZC,QAAQC,IAAI,CACVC,IAAaC,iBAAiBC,KAAK,WACnCF,IAAaG,sBAAsBD,KAAK,YACxCF,IAAaI,mBAAmBF,KAAK,cAEtCG,MAAK,WACJT,QAAQC,IAAI,oBACZT,GAAgB,MAEjBkB,OAAM,SAAAC,GACLX,QAAQC,IAAIU,GACZnB,GAAgB,SAGpB,CAACK,IAGHE,qBAAU,WAIR,GAAGR,GAAgBI,EAAc,CAE/B,IAA8C,IAA3CS,IAAaC,iBAAiBO,SAG/B,OADAZ,QAAQC,IAAI,gBACLT,GAAgB,GAGzB,IAAIP,EAjEe,SAACD,EAAIC,GAC1B,GAAID,GAAoB,oBAAPA,EAAmB,CAChC,IAAME,EAAgBJ,EAAe+B,OAGrC,OAFA/B,EAAegC,MAAK,GACpB/B,EAAiBC,EAAIC,EAAUC,GACxBA,EAEP,MAAM,IAAI6B,MAAM,+BA0DHC,CAAgB,sBAAC,8BAAA7B,EAAA,yDAE1BU,EAAUoB,QAAQC,MAFQ,uBAG5BlB,QAAQC,IAAI,wBAHgB,iCAO1BkB,EAAetB,EAAUoB,QAAQC,MAPP,SASxBE,EAAM,WACR,OAAO,IAAIlB,QAAJ,uCAAY,WAAOmB,EAAQC,GAAf,iBAAAnC,EAAA,6DACboC,GAAU,EACdnC,YAAW,WAET,OADAmC,GAAU,EACHD,MACP,KALe,SAOMlB,IAAuBe,EAAa,IAAIf,KAP9C,UAOboB,EAPa,OAQbD,EARa,uBASf7B,EAAa8B,EAAWX,QATT,kBAURQ,KAVQ,2CAAZ,0DAVmB,SAwBtBD,IAxBsB,mHA4B9B,KAEF,OAAO,WApFc,IAAClC,EACpBJ,EADoBI,EAqFDD,KAnFnBH,EAAeI,IAAiB,OAsFpC,CAACK,EAAaI,IAGhB,IAAI8B,EAAUhC,EAAY,oBACtBiC,EAAQ,MAOZ,OAJGjC,EAAY,IACbiC,EAAQ,WAIR,yBAAKC,UAAU,OACb,uBAAGA,UAAU,UAAUC,MAAO,CAACC,gBAAiBH,IAASD,GACzD,kBAAC,IAAD,CAAQE,UAAU,MAAMG,IAAKjC,EAAWkC,iBAvFnB,CACvBC,MAAO,KACPC,OAAQ,IACRC,WAAY,QAoFkEC,OAAO,EAAOC,YAAa,kBAAMxC,GAAgB,QCtH/GyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.052833b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React,{ useEffect, useState, useRef } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Webcam from \"react-webcam\";\r\nimport * as faceapi from 'face-api.js';\r\n\r\n\r\n\r\nconst asyncIntervals = [];\r\n\r\nconst runAsyncInterval = async(cb, interval, intervalIndex) => {\r\n    await cb();\r\n    if (asyncIntervals[intervalIndex]) {\r\n        setTimeout(() => runAsyncInterval(cb, interval, intervalIndex), interval);\r\n    }\r\n};\r\n\r\nconst setAsyncInterval = (cb, interval) => {\r\n    if (cb && typeof cb === \"function\") {\r\n        const intervalIndex = asyncIntervals.length;\r\n        asyncIntervals.push(true);\r\n        runAsyncInterval(cb, interval, intervalIndex);\r\n        return intervalIndex;\r\n    } else {\r\n        throw new Error('Callback must be a function');\r\n    }\r\n};\r\n\r\nconst clearAsyncInterval = (intervalIndex) => {\r\n    if (asyncIntervals[intervalIndex]) {\r\n        asyncIntervals[intervalIndex] = false;\r\n    }\r\n};\r\n\r\n\r\n\r\nfunction App() {\r\n  const [modelsLoaded, setModelsLoaded] = useState(false);\r\n  const [cantCaras, setCantCaras] = useState(0);\r\n  const [streamLoaded, setStreamLoaded] = useState(false);\r\n  const _videoRef = useRef(null);\r\n\r\n\r\n  const videoConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: \"user\"\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(_videoRef){\r\n      \r\n      console.log(\"Cargando Modelos\");\r\n      Promise.all([\r\n        faceapi.nets.tinyFaceDetector.load('/models'),\r\n        faceapi.nets.faceLandmark68TinyNet.load('./models'),\r\n        faceapi.nets.faceRecognitionNet.load('./models')\r\n      ])\r\n      .then(() => {\r\n        console.log(\"Modelos Cargados\");\r\n        setModelsLoaded(true);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        setModelsLoaded(false);\r\n      });\r\n    }\r\n  },[_videoRef]);\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    \r\n\r\n    if(modelsLoaded && streamLoaded ){\r\n      \r\n      if(faceapi.nets.tinyFaceDetector.isLoaded === false){\r\n      \r\n        console.log(\"no se cargo!\");\r\n        return setModelsLoaded(false);\r\n      }\r\n\r\n      let interval = setAsyncInterval(async () => {\r\n        \r\n        if(!_videoRef.current.video){\r\n          console.log(\"Algo pasa con la cam\");\r\n          return;\r\n        }\r\n\r\n        let videoElement = _videoRef.current.video;\r\n        try {\r\n          let pro = () => {\r\n            return new Promise(async (resolve,reject) => {\r\n              let timeOut = false;\r\n              setTimeout(() => {\r\n                timeOut = true;\r\n                return reject();\r\n              },1000);\r\n  \r\n              let detections = await faceapi.detectAllFaces(videoElement,new faceapi.TinyFaceDetectorOptions());\r\n              if(!timeOut){\r\n                setCantCaras(detections.length);\r\n                return resolve();\r\n              }\r\n            });\r\n          };\r\n          await pro();\r\n        } catch (error) {\r\n          \r\n        }\r\n      },1000);\r\n\r\n      return () => {\r\n        clearAsyncInterval(interval);\r\n      }\r\n    }\r\n  },[modelsLoaded,streamLoaded]);\r\n\r\n\r\n  let mensaje = cantCaras + \" caras detectadas\";\r\n  let color = \"red\";\r\n\r\n\r\n  if(cantCaras > 0){\r\n    color = \"#54f542\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p className=\"mensaje\" style={{backgroundColor: color}}>{mensaje}</p>\r\n      <Webcam className=\"App\" ref={_videoRef} videoConstraints={videoConstraints} audio={false} onUserMedia={() => setStreamLoaded(true)}  />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}